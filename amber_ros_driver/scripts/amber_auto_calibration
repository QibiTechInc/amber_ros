#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
import time
from amber_ros_driver.amber_driver import AmberDriver
from amber_ros_driver.hr4c_comm import HR4CCOM


class AutoCalibration(object):
    def __init__(self, ipaddr, lr):
        port = 54321
        self._amber_driver = AmberDriver(HR4CCOM(), ipaddr, port)
        self._lr = lr

        # キャリブレーションオフセット
        # J1: 内, J2: 奥, J3: J2奥で折りたたむ
        if lr == 'r':
            self._calib_list = [0.924, 0.70596, -2.6647]
        else:
            self._calib_list = [-0.924, 0.70596, -2.6647]

    def run(self):
        print("start auto calibration")

        # サーボオフ
        self._amber_driver.servo_all_off()

        # alarm reset
        print("alarm reset")
        for i in range(3):
            self._amber_driver.alarm_reset(i)

        # 制御モード変更, J2は速度制御、J3は電流制御
        self._amber_driver.set_control_mode([1, 2, 3, 1, 1, 1, 1])

        # 上腕のサーボオン
        self._amber_driver.servo_on(0)
        self._amber_driver.servo_on(1)
        self._amber_driver.servo_on(2)

        # J3をキャリブレーションのために折りたたむ
        current_j3 = -3.0
        self._amber_driver.set_joint_trajectory([0.0,
                                                 0.0,
                                                 current_j3,
                                                 0.0,
                                                 0.0,
                                                 0.0,
                                                 0.0],
                                                3.0,
                                                interpolation_method=AmberDriver.LINEAR,
                                                mask=[1, 0, 0, 1, 1, 1, 1])
        self._amber_driver.wait_interpolation()

        # J2を速度制御で動かす
        joint_angle_list = self._amber_driver.move_until_contact(1,
                                                                 [0, 0.2, 0.0, 0, 0, 0, 0],
                                                                 6.0,
                                                                 thres_count=10,
                                                                 mask=[1, 0, 1, 1, 1, 1, 1])
        if joint_angle_list is None:
            print("Auto calibration is Failed!")
            return

        j2_max = max([x[1] for x in joint_angle_list])
        self._amber_driver.calibrate_joint_from_memory(1,
                                                       self._calib_list[1],
                                                       j2_max)

        # 制御モード変更, J2は電流制御、J3は速度制御
        self._amber_driver.set_control_mode([1, 3, 2, 1, 1, 1, 1])
        # J3を速度制御で動かす
        joint_angle_list = self._amber_driver.move_until_contact(2,
                                                                 [0, 4.0, -0.2, 0, 0, 0, 0],
                                                                 3.0,
                                                                 thres_count=10,
                                                                 mask=[1, 0, 0, 1, 1, 1, 1])
        if joint_angle_list is None:
            print("Auto calibration is Failed!")
            return

        j3_min = min([x[2] for x in joint_angle_list])
        self._amber_driver.calibrate_joint_from_memory(2,
                                                       self._calib_list[2],
                                                       j3_min)

        # J2, J3をアームレストにゆっくりおろす
        # 制御モード変更, J2J3は電流制御
        self._amber_driver.set_control_mode([1, 3, 3, 1, 1, 1, 1])
        time.sleep(0.3)
        self._amber_driver.servo_off(0)
        self._amber_driver.servo_on(3)
        time.sleep(0.1)
        current_j2 = 0.5
        current_j3 = -1.0
        self._amber_driver.set_joint_trajectory([0.0,
                                                 current_j2,
                                                 current_j3,
                                                 0.0,
                                                 0.0,
                                                 0.0,
                                                 0.0],
                                                3.0,
                                                interpolation_method=AmberDriver.LINEAR,
                                                mask=[1, 0, 0, 1, 1, 1, 1])
        self._amber_driver.wait_interpolation()
        time.sleep(1.0)
        # J2, J3の姿勢をキャリブレーション位置に変更する
        self._amber_driver.go_to_home_position(goal_time=2.0,
                                               mode=[2, 1, 1, 1, 1, 1, 1],
                                               mask=[1, 0, 0, 0, 0, 0, 0])
        time.sleep(1.0)

        # J1キャリブレーション
        if self._lr == 'r':
            speed_j1 = 0.2
        else:
            speed_j1 = -0.2
        self._amber_driver.move_until_contact(0,
                                              [speed_j1, 0.0, 0.0, 0, 0, 0, 0],
                                              5.0,
                                              thres_count=10,
                                              mask=[0, 1, 1, 1, 1, 1, 1])
        self._amber_driver.calibrate_joint(0, self._calib_list[0])
        time.sleep(0.5)

        # J1を正面に移動
        self._amber_driver.servo_off(0)
        time.sleep(0.5)
        self._amber_driver.set_control_mode([1, 1, 1, 1, 1, 1, 1])
        time.sleep(0.5)
        self._amber_driver.servo_on(0)
        time.sleep(0.5)
        self._amber_driver.set_joint_trajectory([0.0,
                                                 0.0,
                                                 0.0,
                                                 0.0,
                                                 0.0,
                                                 0.0,
                                                 0.0],
                                                3.0,
                                                mask=[0, 1, 1, 1, 1, 1, 1])
        self._amber_driver.wait_interpolation()

        # J2, J3をアームレストにゆっくりおろす
        self._amber_driver.go_to_rest_position()

        # 全関節サーボオフにして制御モードを位置制御に戻す
        self._amber_driver.servo_all_off()
        time.sleep(0.1)
        self._amber_driver.set_control_mode([1, 1, 1, 1, 1, 1, 1])

        print("finish auto calibration")


if __name__ == '__main__':
    if len(sys.argv) < 3:
        print("Usage: rosrun amber_ros_driver amber_auto_calibration 172.16.1.101 r")
    else:
        calibrator = AutoCalibration(sys.argv[1], sys.argv[2])
        calibrator.run()
